#pragma checksum "D:\ProjectPRN\Nghien_Nhua\Views\Shared\_layoutAddProduct.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "02083f17761fd922c4687cd4d056f5ac40909081b41644eed8ee252fcc071634"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__layoutAddProduct), @"mvc.1.0.view", @"/Views/Shared/_layoutAddProduct.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\ProjectPRN\Nghien_Nhua\Views\_ViewImports.cshtml"
using Nghien_Nhua;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ProjectPRN\Nghien_Nhua\Views\_ViewImports.cshtml"
using Nghien_Nhua.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"02083f17761fd922c4687cd4d056f5ac40909081b41644eed8ee252fcc071634", @"/Views/Shared/_layoutAddProduct.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"82e0436fdd10ae7141b44e3979f6ca4fcc3015b977b6d488224fe828f25a5022", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Shared__layoutAddProduct : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", "~/css/listProductCss.css", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", "~/css/site.css", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", "~/css/notificationCss.css", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02083f17761fd922c4687cd4d056f5ac40909081b41644eed8ee252fcc0716344980", async() => {
                WriteLiteral("\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>");
#nullable restore
#line 7 "D:\ProjectPRN\Nghien_Nhua\Views\Shared\_layoutAddProduct.cshtml"
      Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(@" - Nghien_Nhua</title>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"" rel=""stylesheet""
        integrity=""sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"" crossorigin=""anonymous"">
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"">
    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "02083f17761fd922c4687cd4d056f5ac40909081b41644eed8ee252fcc0716346092", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
#nullable restore
#line 12 "D:\ProjectPRN\Nghien_Nhua\Views\Shared\_layoutAddProduct.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion = true;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-append-version", __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.Href = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "02083f17761fd922c4687cd4d056f5ac40909081b41644eed8ee252fcc0716348127", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
#nullable restore
#line 13 "D:\ProjectPRN\Nghien_Nhua\Views\Shared\_layoutAddProduct.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion = true;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-append-version", __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.Href = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "02083f17761fd922c4687cd4d056f5ac40909081b41644eed8ee252fcc07163410161", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
#nullable restore
#line 14 "D:\ProjectPRN\Nghien_Nhua\Views\Shared\_layoutAddProduct.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion = true;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-append-version", __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.Href = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "02083f17761fd922c4687cd4d056f5ac40909081b41644eed8ee252fcc07163412909", async() => {
                WriteLiteral("\r\n    ");
#nullable restore
#line 19 "D:\ProjectPRN\Nghien_Nhua\Views\Shared\_layoutAddProduct.cshtml"
Write(RenderBody());

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
    <script src=""https://kit.fontawesome.com/ae360af17e.js"" crossorigin=""anonymous""></script>
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js""
        integrity=""sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe""
        crossorigin=""anonymous""></script>
    <script>
        function showFields() {
            var category = document.getElementById(""category"").value;
            var fieldsDiv = document.getElementById(""fields"");
            fieldsDiv.innerHTML = """";
            if (category === ""Keyboard"") {
                fieldsDiv.innerHTML = `
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Led:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""keyboard_led"" name=""led_keyboard"">
<div class=""form-message text-start""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-co");
                WriteLiteral(@"ntent-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Mode:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""keyboard_mode"" name=""mode_keyboard"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Switch:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""keyboard_switch"" name=""switchType_keyboard"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Keycap:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""keyboard_keycap"" name=""keycapType_keyboard"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div c");
                WriteLiteral(@"lass=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Plate:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""keyboard_plate"" name=""plate_keyboard"">
<div class=""form-message""></div>
</div>
</div>

 <div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Case:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""keyboard_case"" name=""case_keyboard"">
<div class=""form-message""></div>
</div>
</div>
`;
                const keyboard_led = document.getElementById('keyboard_led');
                const keyboard_mode = document.getElementById('keyboard_mode');
                const keyboard_switch = document.getElementById('keyboard_switch');
                const keyboard_keycap = document.getElementById('keyboard_keycap');
                const keyboard_plate = document.getElementById('keyboard_plate');
                const");
                WriteLiteral(@" keyboard_case = document.getElementById('keyboard_case');

                const setError = (element, message) => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = message;
                    inputControl.classList.add('error');
                    inputControl.classList.remove('success');
                };
                const setSuccess = element => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = '';
                    inputControl.classList.add('success');
                    inputControl.classList.remove('error');
                };
                const isValidNumber = number => {
                    const regex = /^[1-9]\d*$/;
                    return regex.test(String(number).toLowerCase");
                WriteLiteral(@"());
                };
                const validateInputs = () => {
                    const keyboard_ledValue = keyboard_led.value.trim();
                    const keyboard_modeValue = keyboard_mode.value.trim();
                    const keyboard_switchValue = keyboard_switch.value.trim();
                    const keyboard_keycapValue = keyboard_keycap.value.trim();
                    const keyboard_plateValue = keyboard_plate.value.trim();
                    const keyboard_caseValue = keyboard_case.value.trim();
                    let hasError = false;

                    if (keyboard_ledValue === '') {
                        keyboard_led.classList.add('invalid');
                        keyboard_led.classList.remove('valid');
                        setError(keyboard_led, 'Led không được bỏ trống');
                        hasError = true;
                    } else {
                        keyboard_led.classList.remove('invalid');
                        keyboard_led.classLi");
                WriteLiteral(@"st.add('valid');
                        setSuccess(keyboard_led);
                    }

                    if (keyboard_modeValue === '') {
                        keyboard_mode.classList.add('invalid');
                        keyboard_mode.classList.remove('valid');
                        setError(keyboard_mode, 'Mode Không được bỏ trống');
                        hasError = true;
                    } else {
                        keyboard_mode.classList.remove('invalid');
                        keyboard_mode.classList.add('valid');
                        setSuccess(keyboard_mode);
                    }

                    if (keyboard_switchValue === '') {
                        keyboard_switch.classList.add('invalid');
                        keyboard_switch.classList.remove('valid');
                        setError(keyboard_switch, 'Switch không được bỏ trống');
                        hasError = true;
                    } else {
                        keyboard_switch.cl");
                WriteLiteral(@"assList.remove('invalid');
                        keyboard_switch.classList.add('valid');
                        setSuccess(keyboard_switch);
                    }

                    if (keyboard_keycapValue === '') {
                        keyboard_keycap.classList.add('invalid');
                        keyboard_keycap.classList.remove('valid');
                        setError(keyboard_keycap, 'Keycap không được bỏ trống');
                        hasError = true;
                    } else {
                        keyboard_keycap.classList.remove('invalid');
                        keyboard_keycap.classList.add('valid');
                        setSuccess(keyboard_keycap);
                    }

                    if (keyboard_plateValue === '') {
                        keyboard_plate.classList.add('invalid');
                        keyboard_plate.classList.remove('valid');
                        setError(keyboard_plate, 'Plate không được bỏ trống');
                        h");
                WriteLiteral(@"asError = true;
                    } else {
                        keyboard_plate.classList.remove('invalid');
                        keyboard_plate.classList.add('valid');
                        setSuccess(keyboard_plate);
                    }

                    if (keyboard_caseValue === '') {
                        keyboard_case.classList.add('invalid');
                        keyboard_case.classList.remove('valid');
                        setError(keyboard_case, 'Case không được bỏ trống');
                        hasError = true;
                    } else {
                        keyboard_case.classList.remove('invalid');
                        keyboard_case.classList.add('valid');
                        setSuccess(keyboard_case);
                    }

                    return !hasError;
                }
                    ;
                form.addEventListener('submit', function (e) {
                    if (!validateInputs()) {
                        e.preven");
                WriteLiteral(@"tDefault(); // Ngăn chặn biểu mẫu gửi đi nếu có lỗi
                    }
                });
            } else if (category === ""Kit"") {
                fieldsDiv.innerHTML = `
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Layout:</label> 
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""kit_layout"" name=""layout_kit"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Mạch:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""kit_circuit"" name=""circuit_kit"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Plate:</label>

</div>
<div class=""co");
                WriteLiteral(@"l-md-10"">
<input type=""text"" class=""form-control"" id=""kit_plate"" name=""plate_kit"">
<div class=""form-message""></div>
</div>
</div>
</div><div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Mode:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""kit_mode"" name=""mode_kit"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Case:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""kit_case"" name=""case_kit"">
<div class=""form-message""></div>
</div>
</div>
`;
                const kit_layout = document.getElementById('kit_layout');
                const kit_circuit = document.getElementById('kit_circuit');
                const kit_plate = document.getElementById('kit_plate');
                const ki");
                WriteLiteral(@"t_mode = document.getElementById('kit_mode');
                const kit_case = document.getElementById('kit_case');
                let hasError = false;

                const setError = (element, message) => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = message;
                    inputControl.classList.add('error');
                    inputControl.classList.remove('success');
                };
                const setSuccess = element => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = '';
                    inputControl.classList.add('success');
                    inputControl.classList.remove('error');
                };
                const isValidNumber = number => {
                ");
                WriteLiteral(@"    const regex = /^[1-9]\d*$/;
                    return regex.test(String(number).toLowerCase());
                };
                const validateInputs = () => {
                    const kit_layoutValue = kit_layout.value.trim();
                    const kit_circuitValue = kit_circuit.value.trim();
                    const kit_plateValue = kit_plate.value.trim();
                    const kit_modeValue = kit_mode.value.trim();
                    const kit_caseValue = kit_case.value.trim();
                    let hasError = false;
                    if (kit_layoutValue === '') {
                        kit_layout.classList.add('invalid');
                        kit_layout.classList.remove('valid');
                        setError(kit_layout, 'Layout không được bỏ trống');
                        hasError = true;
                    } else {
                        kit_layout.classList.remove('invalid');
                        kit_layout.classList.add('valid');
                  ");
                WriteLiteral(@"      setSuccess(kit_layout);
                    }

                    if (kit_circuitValue === '') {
                        kit_circuit.classList.add('invalid');
                        kit_circuit.classList.remove('valid');
                        setError(kit_circuit, 'Mạch không được bỏ trống');
                        hasError = true;
                    } else {
                        kit_circuit.classList.remove('invalid');
                        kit_circuit.classList.add('valid');
                        setSuccess(kit_circuit);
                    }

                    if (kit_plateValue === '') {
                        kit_plate.classList.add('invalid');
                        kit_plate.classList.remove('valid');
                        setError(kit_plate, 'Plate không được bỏ trống');
                        hasError = true;
                    } else {
                        kit_plate.classList.remove('invalid');
                        kit_plate.classList.add('valid'");
                WriteLiteral(@");
                        setSuccess(kit_plate);
                    }

                    if (kit_modeValue === '') {
                        kit_mode.classList.add('invalid');
                        kit_mode.classList.remove('valid');
                        setError(kit_mode, 'Mode không được bỏ trống');
                        hasError = true;
                    } else {
                        kit_mode.classList.remove('invalid');
                        kit_mode.classList.add('valid');
                        setSuccess(kit_mode);
                    }

                    if (kit_caseValue === '') {
                        kit_case.classList.add('invalid');
                        kit_case.classList.remove('valid');
                        setError(kit_case, 'Case không được bỏ trống');
                        hasError = true;
                    } else {
                        kit_case.classList.remove('invalid');
                        kit_case.classList.add('valid');
   ");
                WriteLiteral(@"                     setSuccess(kit_case);
                    }
                    return !hasError;
                }
                    ;
                form.addEventListener('submit', function (e) {
                    if (!validateInputs()) {
                        e.preventDefault(); // Ngăn chặn biểu mẫu gửi đi nếu có lỗi
                    }
                });


            } else if (category === ""Keycap"") {
                fieldsDiv.innerHTML = `
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Chất liệu:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""keycap_material"" name=""material_key_cap"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Layout:</label>
</div>
<div class=""col-md-10"">   ");
                WriteLiteral(@"         
<input type=""text"" class=""form-control"" id=""keycap_layout"" name=""layout_keycap"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Độ dày:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""keycap_thickness"" name=""thickness_keycap"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Độ bền:</label>
</div>
<div class=""col-md-10"">                   
<input type=""text"" class=""form-control"" id=""keycap_durability"" name=""durability_keycap"">
<div class=""form-message""></div>
</div>
</div>
`;
                const keycap_material = document.getElementById('keycap_material');
                const keycap_layout = document.getElementById('keycap_layout');
            ");
                WriteLiteral(@"    const keycap_thickness = document.getElementById('keycap_thickness');
                const keycap_durability = document.getElementById('keycap_durability');
                let hasError = false;

                const setError = (element, message) => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = message;
                    inputControl.classList.add('error');
                    inputControl.classList.remove('success');
                };

                const setSuccess = element => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = '';
                    inputControl.classList.add('success');
                    inputControl.classList.remove('error');
                };

                c");
                WriteLiteral(@"onst isValidNumber = number => {
                    const regex = /^[1-9]\d*$/;
                    return regex.test(String(number).toLowerCase());
                };
                const validateInputs = () => {
                    const keycap_materialValue = keycap_material.value.trim();
                    const keycap_layoutValue = keycap_layout.value.trim();
                    const keycap_thicknessValue = keycap_thickness.value.trim();
                    const keycap_durabilityValue = keycap_durability.value.trim();

                    let hasError = false;
                    if (keycap_materialValue === '') {
                        keycap_material.classList.add('invalid');
                        keycap_material.classList.remove('valid');
                        setError(keycap_material, 'Chất liệu không được bỏ trống');
                        hasError = true;
                    } else {
                        keycap_material.classList.remove('invalid');
                  ");
                WriteLiteral(@"      keycap_material.classList.add('valid');
                        setSuccess(keycap_material);
                    }

                    if (keycap_layoutValue === '') {
                        keycap_layout.classList.add('invalid');
                        keycap_layout.classList.remove('valid');
                        setError(keycap_layout, 'Layout không được bỏ trống');
                        hasError = true;
                    } else {
                        keycap_layout.classList.remove('invalid');
                        keycap_layout.classList.add('valid');
                        setSuccess(keycap_layout);
                    }

                    if (keycap_thicknessValue === '') {
                        keycap_thickness.classList.add('invalid');
                        keycap_thickness.classList.remove('valid');
                        setError(keycap_thickness, 'Độ dày không được bỏ trống');
                        hasError = true;
                    } else {
    ");
                WriteLiteral(@"                    keycap_thickness.classList.remove('invalid');
                        keycap_thickness.classList.add('valid');
                        setSuccess(keycap_thickness);
                    }

                    if (keycap_durabilityValue === '') {
                        keycap_durability.classList.add('invalid');
                        keycap_durability.classList.remove('valid');
                        setError(keycap_durability, 'Độ bền không được bỏ trống');
                        hasError = true;
                    } else {
                        keycap_durability.classList.remove('invalid');
                        keycap_durability.classList.add('valid');
                        setSuccess(keycap_durability);
                    }
                    return !hasError;
                }
                    ;
                form.addEventListener('submit', function (e) {
                    if (!validateInputs()) {
                        e.preventDefault(); // Ng");
                WriteLiteral(@"ăn chặn biểu mẫu gửi đi nếu có lỗi
                    }
                });

            } else if (category === ""Switch"") {
                fieldsDiv.innerHTML = `
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Pin:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""switch_pin"" name=""pin_switch"">
<div class=""form-message""></div>
</div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Loại:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""switch_type"" name=""type_switch"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Lò xò:</label>
</div>
<div class=""");
                WriteLiteral(@"col-md-10"">            
<input type=""text"" class=""form-control"" id=""switch_complexity"" name=""complexity_switch"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Độ bền:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""switch_durability"" name=""durability_switch"">
<div class=""form-message""></div>
</div>
</div>
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Hành trình:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""switch_travel"" name=""travel_switch"">
<div class=""form-message""></div>
</div>
</div>
`;
                const switch_pin = document.getElementById('switch_pin');
                const switch_type = document.getElementById('switch_type');
                const switch_complexi");
                WriteLiteral(@"ty = document.getElementById('switch_complexity');
                const switch_durability = document.getElementById('switch_durability');
                const switch_travel = document.getElementById('switch_travel');
                let hasError = false;

                const setError = (element, message) => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = message;
                    inputControl.classList.add('error');
                    inputControl.classList.remove('success');
                };

                const setSuccess = element => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = '';
                    inputControl.classList.add('success');
                    inputControl.classList");
                WriteLiteral(@".remove('error');
                };

                const isValidNumber = number => {
                    const regex = /^[1-9]\d*$/;
                    return regex.test(String(number).toLowerCase());
                };
                const validateInputs = () => {
                    const switch_pinValue = switch_pin.value.trim();
                    const switch_typeValue = switch_type.value.trim();
                    const switch_complexityValue = switch_complexity.value.trim();
                    const switch_durabilityValue = switch_durability.value.trim();
                    const switch_travelValue = switch_travel.value.trim();

                    if (switch_pinValue === '') {
                        switch_pin.classList.add('invalid');
                        switch_pin.classList.remove('valid');
                        setError(switch_pin, 'Pin không được bỏ trống');
                        hasError = true;
                    } else {
                        switch_pin.");
                WriteLiteral(@"classList.remove('invalid');
                        switch_pin.classList.add('valid');
                        setSuccess(switch_pin);
                    }

                    if (switch_typeValue === '') {
                        switch_type.classList.add('invalid');
                        switch_type.classList.remove('valid');
                        setError(switch_type, 'Loại không được bỏ trống');
                        hasError = true;
                    } else {
                        switch_type.classList.remove('invalid');
                        switch_type.classList.add('valid');
                        setSuccess(switch_type);
                    }

                    if (switch_complexityValue === '') {
                        switch_complexity.classList.add('invalid');
                        switch_complexity.classList.remove('valid');
                        setError(switch_complexity, 'Lò xo không được bỏ trống');
                        hasError = true;
         ");
                WriteLiteral(@"           } else {
                        switch_complexity.classList.remove('invalid');
                        switch_complexity.classList.add('valid');
                        setSuccess(switch_complexity);
                    }

                    if (switch_durabilityValue === '') {
                        switch_durability.classList.add('invalid');
                        switch_durability.classList.remove('valid');
                        setError(switch_durability, 'Độ bền không được bỏ trống');
                        hasError = true;
                    } else {
                        switch_durability.classList.remove('invalid');
                        switch_durability.classList.add('valid');
                        setSuccess(switch_durability);
                    }

                    if (switch_travelValue === '') {
                        switch_travel.classList.add('invalid');
                        switch_travel.classList.remove('valid');
                        s");
                WriteLiteral(@"etError(switch_travel, 'Hành trình không được bỏ trống');
                        hasError = true;
                    } else {
                        switch_travel.classList.remove('invalid');
                        switch_travel.classList.add('valid');
                        setSuccess(switch_travel);
                    }

                    return !hasError;
                }
                    ;
                form.addEventListener('submit', function (e) {
                    if (!validateInputs()) {
                        e.preventDefault(); // Ngăn chặn biểu mẫu gửi đi nếu có lỗi
                    }
                });


            } else if (category === ""Earphone"") {
                fieldsDiv.innerHTML = `
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Type:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""earphone_type"" name=");
                WriteLiteral(@"""type_earphone"">
<div class=""form-message""></div>
</div>
</div>

 <div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Plug:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""earphone_plug"" name=""plug_earphone"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Compatibility:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""earphone_compatibility"" name=""compatibility_earphone"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Wire length:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-contr");
                WriteLiteral(@"ol"" id=""earphone_wirelength"" name=""wirelength_earphone"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Utility:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""earphone_utility"" name=""utility_earphone"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Connect:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""earphone_connect"" name=""connect_earphone"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Control:</label>
</div>
<div class=""col-md-10"">            
<input typ");
                WriteLiteral(@"e=""text"" class=""form-control"" id=""earphone_control"" name=""control_earphone"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Charging port:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""earphone_chargingport"" name=""chargingport_earphone"">
<div class=""form-message""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Connect tech:</label>
</div>
<div class=""col-md-10"">            
<input type=""text"" class=""form-control"" id=""earphone_connecttech"" name=""connecttech_earphone"">
<div class=""form-message""></div>
</div>
</div>
`;
                const earphone_type = document.getElementById('earphone_type');
                const earphone_plug = document.getElementById('earphone_plug');
     ");
                WriteLiteral(@"           const earphone_compatibility = document.getElementById('earphone_compatibility');
                const earphone_wirelength = document.getElementById('earphone_wirelength');
                const earphone_utility = document.getElementById('earphone_utility');
                const earphone_connect = document.getElementById('earphone_connect');
                const earphone_control = document.getElementById('earphone_control');
                const earphone_chargingport = document.getElementById('earphone_chargingport');
                const earphone_connecttech = document.getElementById('earphone_connecttech');
                let hasError = false;

                const setError = (element, message) => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = message;
                    inputControl.classList.add('error');
                    ");
                WriteLiteral(@"inputControl.classList.remove('success');
                };

                const setSuccess = element => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = '';
                    inputControl.classList.add('success');
                    inputControl.classList.remove('error');
                };

                const isValidNumber = number => {
                    const regex = /^[1-9]\d*$/;
                    return regex.test(String(number).toLowerCase());
                };
                const validateInputs = () => {
                    const earphone_typeValue = earphone_type.value.trim();
                    const earphone_plugValue = earphone_plug.value.trim();
                    const earphone_compatibilityValue = earphone_compatibility.value.trim();
                    const earphone_wirelengthValue = earphone_wirelength.value.tr");
                WriteLiteral(@"im();
                    const earphone_utilityValue = earphone_utility.value.trim();
                    const earphone_connectValue = earphone_connect.value.trim();
                    const earphone_controlValue = earphone_control.value.trim();
                    const earphone_chargingportValue = earphone_chargingport.value.trim();
                    const earphone_connecttechValue = earphone_connecttech.value.trim();


                    if (earphone_typeValue === '') {
                        earphone_type.classList.add('invalid');
                        earphone_type.classList.remove('valid');
                        setError(earphone_type, 'Type không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_type.classList.remove('invalid');
                        earphone_type.classList.add('valid');
                        setSuccess(earphone_type);
                    }

                    if (earphone_plugValue");
                WriteLiteral(@" === '') {
                        earphone_plug.classList.add('invalid');
                        earphone_plug.classList.remove('valid');
                        setError(earphone_plug, 'Plug không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_plug.classList.remove('invalid');
                        earphone_plug.classList.add('valid');
                        setSuccess(earphone_plug);
                    }

                    if (earphone_compatibilityValue === '') {
                        earphone_compatibility.classList.add('invalid');
                        earphone_compatibility.classList.remove('valid');
                        setError(earphone_compatibility, 'Compatibility không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_compatibility.classList.remove('invalid');
                        earphone_compatibility.classList.add('vali");
                WriteLiteral(@"d');
                        setSuccess(earphone_compatibility);
                    }

                    if (earphone_wirelengthValue === '') {
                        earphone_wirelength.classList.add('invalid');
                        earphone_wirelength.classList.remove('valid');
                        setError(earphone_wirelength, 'Wire leng không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_wirelength.classList.remove('invalid');
                        earphone_wirelength.classList.add('valid');
                        setSuccess(earphone_wirelength);
                    }

                    if (earphone_utilityValue === '') {
                        earphone_utility.classList.add('invalid');
                        earphone_utility.classList.remove('valid');
                        setError(earphone_utility, 'Utility không được bỏ trống');
                        hasError = true;
                    } ");
                WriteLiteral(@"else {
                        earphone_utility.classList.remove('invalid');
                        earphone_utility.classList.add('valid');
                        setSuccess(earphone_utility);
                    }

                    if (earphone_connectValue === '') {
                        earphone_connect.classList.add('invalid');
                        earphone_connect.classList.remove('valid');
                        setError(earphone_connect, 'Connect không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_connect.classList.remove('invalid');
                        earphone_connect.classList.add('valid');
                        setSuccess(earphone_connect);
                    }

                    if (earphone_controlValue === '') {
                        earphone_control.classList.add('invalid');
                        earphone_control.classList.remove('valid');
                        setError(earph");
                WriteLiteral(@"one_control, 'Control không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_control.classList.remove('invalid');
                        earphone_control.classList.add('valid');
                        setSuccess(earphone_control);
                    }

                    if (earphone_chargingportValue === '') {
                        earphone_chargingport.classList.add('invalid');
                        earphone_chargingport.classList.remove('valid');
                        setError(earphone_chargingport, 'Chargingport không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_chargingport.classList.remove('invalid');
                        earphone_chargingport.classList.add('valid');
                        setSuccess(earphone_chargingport);
                    }

                    if (earphone_connecttechValue === '') {
                     ");
                WriteLiteral(@"   earphone_connecttech.classList.add('invalid');
                        earphone_connecttech.classList.remove('valid');
                        setError(earphone_connecttech, 'Connecttech không được bỏ trống');
                        hasError = true;
                    } else {
                        earphone_connecttech.classList.remove('invalid');
                        earphone_connecttech.classList.add('valid');
                        setSuccess(earphone_connecttech);
                    }

                    return !hasError;
                }
                    ;
                form.addEventListener('submit', function (e) {
                    if (!validateInputs()) {
                        e.preventDefault(); // Ngăn chặn biểu mẫu gửi đi nếu có lỗi
                    }
                });
            } else if (category === ""Mouse"") {
                fieldsDiv.innerHTML = `
<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for");
                WriteLiteral(@"=""exampleFormControlInput1"" class=""form-label"">DPi:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""mouse_dpi"" name=""dpi_mouse"">
<div class=""form-message text-start""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Wire length:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""mouse_wirelength"" name=""wirelength_mouse"">
<div class=""form-message text-start""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Led:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""mouse_led"" name=""led_mouse"">
<div class=""form-message text-start""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormCo");
                WriteLiteral(@"ntrolInput1"" class=""form-label"">Type battery:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""mouse_typebattery"" name=""typebattery_mouse"">
<div class=""form-message text-start""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Weight:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""mouse_weight"" name=""weight_mouse"">
<div class=""form-message text-start""></div>
</div>
</div>

<div class=""col-md-9 row my-2 d-flex justify-content-between"">
<div class=""col-auto"">
<label for=""exampleFormControlInput1"" class=""form-label"">Compatibility:</label>
</div>
<div class=""col-md-10"">
<input type=""text"" class=""form-control"" id=""mouse_compatibility"" name=""compatibility_mouse"">
<div class=""form-message text-start""></div>
</div>
</div>            
`;
                const mouse_dpi = document.getElementById('mouse_dpi');");
                WriteLiteral(@"
                const mouse_wirelength = document.getElementById('mouse_wirelength');
                const mouse_led = document.getElementById('mouse_led');
                const mouse_typebattery = document.getElementById('mouse_typebattery');
                const mouse_weight = document.getElementById('mouse_weight');
                const mouse_compatibility = document.getElementById('mouse_compatibility');

                const setError = (element, message) => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-message');
                    errorDisplay.innerText = message;
                    inputControl.classList.add('error');
                    inputControl.classList.remove('success');
                };
                const setSuccess = element => {
                    const inputControl = element.parentElement;
                    const errorDisplay = inputControl.querySelector('.form-messa");
                WriteLiteral(@"ge');
                    errorDisplay.innerText = '';
                    inputControl.classList.add('success');
                    inputControl.classList.remove('error');
                };
                const isValidNumber = number => {
                    const regex = /^[1-9]\d*$/;
                    return regex.test(String(number).toLowerCase());
                };
                const validateInputs = () => {
                    const mouse_dpiValue = mouse_dpi.value.trim();
                    const mouse_wirelengthValue = mouse_wirelength.value.trim();
                    const mouse_ledValue = mouse_led.value.trim();
                    const mouse_typebatteryValue = mouse_typebattery.value.trim();
                    const mouse_weightValue = mouse_weight.value.trim();
                    const mouse_compatibilityValue = mouse_compatibility.value.trim();
                    let hasError = false;

                    if (mouse_dpiValue === '') {
                        mouse");
                WriteLiteral(@"_dpi.classList.add('invalid');
                        mouse_dpi.classList.remove('valid');
                        setError(mouse_dpi, 'DPI không được bỏ trống');
                        hasError = true;
                    } else {
                        mouse_dpi.classList.remove('invalid');
                        mouse_dpi.classList.add('valid');
                        setSuccess(mouse_dpi);
                    }

                    if (mouse_wirelengthValue === '') {
                        mouse_wirelength.classList.add('invalid');
                        mouse_wirelength.classList.remove('valid');
                        setError(mouse_wirelength, 'Wirelength Không được bỏ trống');
                        hasError = true;
                    } else {
                        mouse_wirelength.classList.remove('invalid');
                        mouse_wirelength.classList.add('valid');
                        setSuccess(mouse_wirelength);
                    }

                   ");
                WriteLiteral(@" if (mouse_ledValue === '') {
                        mouse_led.classList.add('invalid');
                        mouse_led.classList.remove('valid');
                        setError(mouse_led, 'Led không được bỏ trống');
                        hasError = true;
                    } else {
                        mouse_led.classList.remove('invalid');
                        mouse_led.classList.add('valid');
                        setSuccess(mouse_led);
                    }

                    if (mouse_typebatteryValue === '') {
                        mouse_typebattery.classList.add('invalid');
                        mouse_typebattery.classList.remove('valid');
                        setError(mouse_typebattery, 'Type battery không được bỏ trống');
                        hasError = true;
                    } else {
                        mouse_typebattery.classList.remove('invalid');
                        mouse_typebattery.classList.add('valid');
                        setSucc");
                WriteLiteral(@"ess(mouse_typebattery);
                    }

                    if (mouse_weightValue === '') {
                        mouse_weight.classList.add('invalid');
                        mouse_weight.classList.remove('valid');
                        setError(mouse_weight, 'Weight không được bỏ trống');
                        hasError = true;
                    } else {
                        mouse_weight.classList.remove('invalid');
                        mouse_weight.classList.add('valid');
                        setSuccess(mouse_weight);
                    }

                    if (mouse_compatibilityValue === '') {
                        mouse_compatibility.classList.add('invalid');
                        mouse_compatibility.classList.remove('valid');
                        setError(mouse_compatibility, 'Compatibility không được bỏ trống');
                        hasError = true;
                    } else {
                        mouse_compatibility.classList.remove('invali");
                WriteLiteral(@"d');
                        mouse_compatibility.classList.add('valid');
                        setSuccess(mouse_compatibility);
                    }

                    return !hasError;
                }
                    ;
                form.addEventListener('submit', function (e) {
                    if (!validateInputs()) {
                        e.preventDefault(); // Ngăn chặn biểu mẫu gửi đi nếu có lỗi
                    }
                });
            }

        }
    </script>

    <script>
        document.addEventListener(""DOMContentLoaded"", function () {
            const form = document.querySelector('#form');
            const pro_name = document.getElementById('Pro_name');
            const pro_price = document.getElementById('Pro_price');
            const pro_quan = document.getElementById('Pro_quan');
            const pro_pic = document.getElementById('formFile');
            const pro_des = document.getElementById('Pro_des');
            const pro_dis");
                WriteLiteral(@" = document.getElementById('Pro_dis');
            const pro_brand = document.getElementById('Pro_brand');
            const pro_origin = document.getElementById('Pro_origin');
            const pro_type = document.getElementById('category');


            const setError = (element, message) => {
                const inputControl = element.parentElement;
                const errorDisplay = inputControl.querySelector('.form-message');
                errorDisplay.innerText = message;
                inputControl.classList.add('error');
                inputControl.classList.remove('success');
            };
            const setSuccess = element => {
                const inputControl = element.parentElement;
                const errorDisplay = inputControl.querySelector('.form-message');
                errorDisplay.innerText = '';
                inputControl.classList.add('success');
                inputControl.classList.remove('error');
            };
            const isValidNumber");
                WriteLiteral(@" = number => {
                const regex = /^[0-9]*\.?[0-9]+$/;
                return regex.test(String(number).toLowerCase());
            };
            const isValidDiscount = number => {
                const regex = /^[0-9]\d*$/;
                return regex.test(String(number).toLowerCase());
            };
            const validateInputs = () => {
                const pro_nameValue = pro_name.value.trim();
                const pro_priceValue = pro_price.value.trim();
                const pro_quanValue = pro_quan.value.trim();
                const pro_picValue = pro_pic.value.trim();
                const pro_desValue = pro_des.value.trim();
                const pro_disValue = pro_dis.value.trim();
                const pro_brandValue = pro_brand.value.trim();
                const pro_originValue = pro_origin.value.trim();
                const pro_typeValue = pro_type.value.trim();
                let hasError = false;

                if (pro_nameValue === '') {
        ");
                WriteLiteral(@"            pro_name.classList.add('invalid');
                    pro_name.classList.remove('valid');
                    setError(pro_name, 'Tên sản phẩm không được để trống');
                    hasError = true;
                } else {
                    pro_name.classList.remove('invalid');
                    pro_name.classList.add('valid');
                    setSuccess(pro_name);
                }



                if (pro_priceValue === '') {
                    pro_price.classList.add('invalid');
                    pro_price.classList.remove('valid');
                    setError(pro_price, 'Giá không được để trống');
                    hasError = true;
                } else if (!isValidNumber(pro_priceValue)) {
                    pro_price.classList.add('invalid');
                    pro_price.classList.remove('valid');
                    setError(pro_price, 'Giá không hợp lệ ');
                    hasError = true;
                } else {
                    pro_p");
                WriteLiteral(@"rice.classList.remove('invalid');
                    pro_price.classList.add('valid');
                    setSuccess(pro_price);
                }

                if (pro_quanValue === '') {
                    pro_quan.classList.add('invalid');
                    pro_quan.classList.remove('valid');
                    setError(pro_quan, 'Số lượng không được để trống');
                    hasError = true;
                } else if (!isValidNumber(pro_quanValue)) {
                    pro_quan.classList.add('invalid');
                    pro_quan.classList.remove('valid');
                    setError(pro_quan, 'Số lượng không hợp lệ');
                    hasError = true;
                } else {
                    pro_quan.classList.remove('invalid');
                    pro_quan.classList.add('valid');
                    setSuccess(pro_quan);
                }



                if (pro_picValue === '') {
                    pro_pic.classList.add('invalid');
                ");
                WriteLiteral(@"    pro_pic.classList.remove('valid');
                    setError(pro_pic, 'Hình ảnh không được để trống');
                    hasError = true;
                } else {
                    pro_pic.classList.remove('invalid');
                    pro_pic.classList.add('valid');
                    setSuccess(pro_pic);
                }

                if (pro_desValue === '') {
                    pro_des.classList.add('invalid');
                    pro_des.classList.remove('valid');
                    setError(pro_des, 'Mô tả không được để trông');
                    hasError = true;
                } else {
                    pro_des.classList.remove('invalid');
                    pro_des.classList.add('valid');
                    setSuccess(pro_des);
                }

                if (pro_disValue === '') {
                    pro_dis.classList.add('invalid');
                    pro_dis.classList.remove('valid');
                    setError(pro_dis, 'Giảm giá không đượ");
                WriteLiteral(@"c để trống');
                    hasError = true;
                } else if (!isValidDiscount(pro_disValue) || pro_disValue > 100) {
                    pro_dis.classList.add('invalid');
                    pro_dis.classList.remove('valid');
                    setError(pro_dis, 'Giảm giá không hợp lệ');
                    hasError = true;
                } else {
                    pro_dis.classList.remove('invalid');
                    pro_dis.classList.add('valid');
                    setSuccess(pro_dis);
                }

                if (pro_brandValue === '') {
                    pro_brand.classList.add('invalid');
                    pro_brand.classList.remove('valid');
                    setError(pro_brand, 'Hãng không được để trống');
                    hasError = true;
                } else {
                    pro_brand.classList.remove('invalid');
                    pro_brand.classList.add('valid');
                    setSuccess(pro_brand);
                }
");
                WriteLiteral(@"
                if (pro_originValue === '') {
                    pro_origin.classList.add('invalid');
                    pro_origin.classList.remove('valid');
                    setError(pro_origin, 'Xuất xứ không được để trống');
                    hasError = true;
                } else {
                    pro_origin.classList.remove('invalid');
                    pro_origin.classList.add('valid');
                    setSuccess(pro_origin);
                }

                if (pro_typeValue === 'default') {
                    pro_type.classList.add('invalid');
                    pro_type.classList.remove('valid');
                    setError(pro_type, 'Loại sản phẩm không được để trống');
                    hasError = true;
                } else {
                    pro_type.classList.remove('invalid');
                    pro_type.classList.add('valid');
                    setSuccess(pro_type);
                }

                return !hasError;
            }
   ");
                WriteLiteral(@"             ;
            form.addEventListener('submit', function (e) {
                if (!validateInputs()) {
                    e.preventDefault(); // Ngăn chặn biểu mẫu gửi đi nếu có lỗi
                }
            });
        }
        );
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
